'use strict'

const { describe, it } = require('mocha')
const assert = require('assert')
const processRelease = require('../lib/process-release')

describe('process-release', function () {
  it('test process release - process.version = 0.8.20', function () {
    var release = processRelease([], { opts: {} }, 'v0.8.20', null)

    assert.strictEqual(release.semver.version, '0.8.20')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.8.20',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.8.20/',
      tarballUrl: 'https://nodejs.org/dist/v0.8.20/node-v0.8.20.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.8.20/SHASUMS256.txt',
      versionDir: '0.8.20',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.8.20/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.8.20/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.8.20/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.version = 0.10.21', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.21', null)

    assert.strictEqual(release.semver.version, '0.10.21')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.21',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.21/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.21/node-v0.10.21.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.21/SHASUMS256.txt',
      versionDir: '0.10.21',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.21/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.21/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.21/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // prior to -headers.tar.gz
  it('test process release - process.version = 0.12.9', function () {
    var release = processRelease([], { opts: {} }, 'v0.12.9', null)

    assert.strictEqual(release.semver.version, '0.12.9')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.12.9',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.12.9/',
      tarballUrl: 'https://nodejs.org/dist/v0.12.9/node-v0.12.9.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.12.9/SHASUMS256.txt',
      versionDir: '0.12.9',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.12.9/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.12.9/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.12.9/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // prior to -headers.tar.gz
  it('test process release - process.version = 0.10.41', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.41', null)

    assert.strictEqual(release.semver.version, '0.10.41')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.41',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.41/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.41/node-v0.10.41.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.41/SHASUMS256.txt',
      versionDir: '0.10.41',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.41/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.41/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.41/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // has -headers.tar.gz
  it('test process release - process.release ~ node@0.10.42', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.42', null)

    assert.strictEqual(release.semver.version, '0.10.42')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.42',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.42/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.42/node-v0.10.42-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.42/SHASUMS256.txt',
      versionDir: '0.10.42',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.42/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.42/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.42/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // has -headers.tar.gz
  it('test process release - process.release ~ node@0.12.10', function () {
    var release = processRelease([], { opts: {} }, 'v0.12.10', null)

    assert.strictEqual(release.semver.version, '0.12.10')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.12.10',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.12.10/',
      tarballUrl: 'https://nodejs.org/dist/v0.12.10/node-v0.12.10-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.12.10/SHASUMS256.txt',
      versionDir: '0.12.10',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.12.10/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.12.10/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.12.10/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v4.1.23/',
      tarballUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 / corp build', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://some.custom.location/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://some.custom.location/',
      tarballUrl: 'https://some.custom.location/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://some.custom.location/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://some.custom.location/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://some.custom.location/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://some.custom.location/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@12.8.0 Windows', function () {
    var release = processRelease([], { opts: {} }, 'v12.8.0', {
      name: 'node',
      sourceUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0.tar.gz',
      headersUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x64/node.lib'
    })

    assert.strictEqual(release.semver.version, '12.8.0')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '12.8.0',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/release/v12.8.0/',
      tarballUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/release/v12.8.0/SHASUMS256.txt',
      versionDir: '12.8.0',
      ia32: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@12.8.0 Windows ARM64', function () {
    var release = processRelease([], { opts: {} }, 'v12.8.0', {
      name: 'node',
      sourceUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0.tar.gz',
      headersUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-arm64/node.lib'
    })

    assert.strictEqual(release.semver.version, '12.8.0')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '12.8.0',
      name: 'node',
      baseUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/',
      tarballUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      shasumsUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/SHASUMS256.txt',
      versionDir: '12.8.0',
      ia32: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 --target=0.10.40', function () {
    var release = processRelease([], { opts: { target: '0.10.40' } }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '0.10.40')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.40',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.40/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.40/node-v0.10.40.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.40/SHASUMS256.txt',
      versionDir: '0.10.40',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.40/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.40/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.40/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 --dist-url=https://foo.bar/baz', function () {
    var release = processRelease([], { opts: { 'dist-url': 'https://foo.bar/baz' } }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://foo.bar/baz/v4.1.23/',
      tarballUrl: 'https://foo.bar/baz/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://foo.bar/baz/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://foo.bar/baz/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://foo.bar/baz/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://foo.bar/baz/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ frankenstein@4.1.23', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'frankenstein',
      headersUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'frankenstein',
      baseUrl: 'https://frankensteinjs.org/dist/v4.1.23/',
      tarballUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://frankensteinjs.org/dist/v4.1.23/SHASUMS256.txt',
      versionDir: 'frankenstein-4.1.23',
      ia32: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-x86/frankenstein.lib', libPath: 'win-x86/frankenstein.lib' },
      x64: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-x64/frankenstein.lib', libPath: 'win-x64/frankenstein.lib' },
      arm64: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-arm64/frankenstein.lib', libPath: 'win-arm64/frankenstein.lib' }
    })
  })

  it('test process release - process.release ~ frankenstein@4.1.23 --dist-url=http://foo.bar/baz/', function () {
    var release = processRelease([], { opts: { 'dist-url': 'http://foo.bar/baz/' } }, 'v4.1.23', {
      name: 'frankenstein',
      headersUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'frankenstein',
      baseUrl: 'http://foo.bar/baz/v4.1.23/',
      tarballUrl: 'http://foo.bar/baz/v4.1.23/frankenstein-v4.1.23-headers.tar.gz',
      shasumsUrl: 'http://foo.bar/baz/v4.1.23/SHASUMS256.txt',
      versionDir: 'frankenstein-4.1.23',
      ia32: { libUrl: 'http://foo.bar/baz/v4.1.23/win-x86/frankenstein.lib', libPath: 'win-x86/frankenstein.lib' },
      x64: { libUrl: 'http://foo.bar/baz/v4.1.23/win-x64/frankenstein.lib', libPath: 'win-x64/frankenstein.lib' },
      arm64: { libUrl: 'http://foo.bar/baz/v4.1.23/win-arm64/frankenstein.lib', libPath: 'win-arm64/frankenstein.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4', function () {
    var release = processRelease([], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4 passed as argv[0]', function () {
  // note the missing 'v' on the arg, it should normalise when checking
    // whether we're on the default or not
    var release = processRelease(['4.0.0-rc.4'], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4 - bogus string passed as argv[0]', function () {
  // additional arguments can be passed in on the commandline that should be ignored if they
    // are not specifying a valid version @ position 0
    var release = processRelease(['this is no version!'], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - NODEJS_ORG_MIRROR', function () {
    process.env.NODEJS_ORG_MIRROR = 'http://foo.bar'

    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'http://foo.bar/v4.1.23/',
      tarballUrl: 'http://foo.bar/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'http://foo.bar/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'http://foo.bar/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'http://foo.bar/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'http://foo.bar/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })

    delete process.env.NODEJS_ORG_MIRROR
  })
})

// SIG // Begin signature block
// SIG // MIIoQAYJKoZIhvcNAQcCoIIoMTCCKC0CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // OqW/uJXTyZU7zqRWjvHvYUvHwlzXwMBSwRQIvslNIO6g
// SIG // gg2LMIIGCTCCA/GgAwIBAgITMwAAA4TZaH1mzHVLoQAA
// SIG // AAADhDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzOFoX
// SIG // DTI0MDkxNTIzNDUzOFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAznLqoz/10YOqShXj
// SIG // Gln6TE4BGUwZ3uJsXV3BIhK2/5WfWH8YMWvFoTgOul1P
// SIG // rrDlA5qOs/1qSNylRSLn+DKx4e+sQC/x8qVPWx+4bwhu
// SIG // NHaNGEMZsppPjtuc10OmdECsioQzVOyu/TlVohP0DUT1
// SIG // w8V4+uR06k9qm+XVcw84nrH6xac865B7TswYpBBBZdaG
// SIG // X5mTst5UnoomlS8JIGqD6WDAyvlmwDRl0C0Omj+b8lg7
// SIG // ZJ4wz9hfYI6eo/kOu2wgYyLPBaXR9iDehwLxN1/xOGDi
// SIG // Dq2WNiWFM/aaBYda645BrjOAk9rc3aoX5AdvEDp7oRMi
// SIG // fgJgdwdNaC/WoTUomQIDAQABo4IBczCCAW8wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFBzcFkQMR/V8OGV/cF0ZRXO9ery8MEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzMTUyMis1MDExNDgwHwYD
// SIG // VR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYD
// SIG // VR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMw
// SIG // UQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAnvqLcbzrt8+kzifeRGz6b
// SIG // UaHMp1aMqJtfMarjiUinqgzSLbtqZslaWomQ4T7LS8rq
// SIG // NJl8jSz4d0wJfm6LblH6RWQzhs4JqllQa3R0MbLt7fvs
// SIG // ehsNASX0L5/3NP5VP40U0UwKe0u4wKo6qcjHNMr66y+s
// SIG // b1DZ965C5Hctslwx1qR3RMeSXaSQ6YJ+Y9bb9xhnbXmH
// SIG // YWZW9h6JWnFYriUm3jHRubAw7KXMPMWNQ7OBTF6uzGKi
// SIG // 2ELK/CsFyWfeUm6GdPVf+TDsKShhoZXtAXOZwBK3SQTY
// SIG // 42gSwTBg4oPTldGd2SH2OIzhZXkxLCuSzk0LUmjVQ+K2
// SIG // xvkJzLMHi2oO6lTO8+SHjqhO1GPwnwhJLJfoaynNzAb3
// SIG // XMj3CdvPcd4EZDh9PRSI0SAHxaQQ0pD4+B1uSyqjUr9w
// SIG // GxZbisemYGzWIcB8UEsQ6mLE5QI7Z2zI2CNkU60iDI4B
// SIG // mEb38Gue8qcj3Zcs5teEOVDYILFsq9ToPkG0HluvkQhu
// SIG // hblf5xAGKzIHh5TEAXedGlYU3QXquQkdxs+quGlS+5xH
// SIG // Q0enmLi9FNXuBKC9jmAaJN8uKwS96+e5yxBGesTBgHuX
// SIG // hwT7YHLj8OUv2iQ66KXrvuAV0ouUf6hpLU5Gyn5STAJX
// SIG // 1xy+muuKPPIfIvGWeBxxzONasTAedo/W4GggkBSRZSyT
// SIG // 7zCCB3owggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoX
// SIG // DTI2MDcwODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
// SIG // ADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0Ib
// SIG // KmvpWlCquAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnV
// SIG // ARQxQtOJDXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mp
// SIG // K656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQu
// SIG // A3WraPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj
// SIG // 3gcN1Vx5pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuAS
// SIG // OrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
// SIG // La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzlu
// SIG // ZH9TupwPrRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgo
// SIG // tswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd
// SIG // 0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKC
// SIG // X9vAFbO9G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTf
// SIG // v0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt
// SIG // 1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1t
// SIG // wyiPLI9AN0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11g
// SIG // lZo+TzOE2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGj
// SIG // ggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQUSG5k5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQ
// SIG // Q7kUBU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJ
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
// SIG // XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUH
// SIG // MAKGQmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kv
// SIG // Y2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIy
// SIG // LmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMw
// SIG // gYMwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0
// SIG // bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBw
// SIG // AG8AbABpAGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4g
// SIG // HTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPY
// SIG // dGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/
// SIG // 6ArKO79HqaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpL
// SIG // HPM8QotS0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14
// SIG // eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAq
// SIG // PyprWEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWv
// SIG // J+3Q3fMOr5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5
// SIG // CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
// SIG // WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8V
// SIG // fUWnduVAKmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX
// SIG // 0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HH
// SIG // Diju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnF
// SIG // sZulP0V3HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX
// SIG // 4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDt
// SIG // BEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jM
// SIG // pF3BoYibV3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJz
// SIG // Ew16UM0xghoNMIIaCQIBATCBlTB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExAhMzAAADhNlofWbMdUuhAAAA
// SIG // AAOEMA0GCWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJ
// SIG // AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAM
// SIG // BgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCATeZn9
// SIG // FDj7ZR9mtWnoplatO8xG166GNT2iaOKy5fon4zBCBgor
// SIG // BgEEAYI3AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBm
// SIG // AHShGoAYaHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAK+s0uPm1hDs+zIdNwEPr9m6
// SIG // 3u1HRx9JIYWDuFyiea9ywn1G5BBrVQa2Pt5H9XrpIhCV
// SIG // 5Ji3Mf+BXMKzUX0Ln143PMnUSAAWvrM3CcDfRIi3y3G1
// SIG // uhdgcrdwGrE0w/qIyx2KbfXonQV8cOHk0G/bYsyHBjSR
// SIG // HAV5VA0A0IcDuoj53t7lgszQNNz0fUxKYd0SO6PavDGN
// SIG // fi8WwRh6ZC/0ysb8FP2er0C9SXci9YmSTZNSeGe/TJ9U
// SIG // ORGdTaOY8DvzGz9nBpe8kAcIm/Z9maO/O9+b/Zinv7iY
// SIG // oV7hZMiqEnEtPNiGCAn24pImKAPzGzN1f9T7saJIkpwL
// SIG // FPCVBNqwetKhgheXMIIXkwYKKwYBBAGCNwMDATGCF4Mw
// SIG // ghd/BgkqhkiG9w0BBwKgghdwMIIXbAIBAzEPMA0GCWCG
// SIG // SAFlAwQCAQUAMIIBUgYLKoZIhvcNAQkQAQSgggFBBIIB
// SIG // PTCCATkCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQME
// SIG // AgEFAAQgWEsyb/x51HrhUx/cmJ2CSIMZ3arA39HoYda3
// SIG // 5BEt18MCBmWf+C8BVxgTMjAyNDAxMTgyMjM5MDEuNzc4
// SIG // WjAEgAIB9KCB0aSBzjCByzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNO
// SIG // Ojg2MDMtMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNloIIR7TCCByAwggUI
// SIG // oAMCAQICEzMAAAHXmw0eVy6MUY4AAQAAAdcwDQYJKoZI
// SIG // hvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTAwHhcNMjMwNTI1MTkxMjM3WhcNMjQwMjAxMTkxMjM3
// SIG // WjCByzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMc
// SIG // TWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUG
// SIG // A1UECxMeblNoaWVsZCBUU1MgRVNOOjg2MDMtMDVFMC1E
// SIG // OTQ3MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A
// SIG // MIICCgKCAgEAxKxgpDdl/1L7jQnH5dMlQTaPiyCMsxuw
// SIG // NdF+ZFYBp6fbPJn+GmbLpGbua7y7OzamjRMXMJz7hyFn
// SIG // aepLMI2tWMPUsU1/hNJXqvlgbnCESlnXDLpiAwYCxNBG
// SIG // /9/wWPeWbU9V7J52rQRWYa9Li5A4k/R4K0W9dtrJu/2J
// SIG // MjIoBZE9CbqIkj16Cy+8GlBPbXiPUDpKI6o0ZXCAuGFT
// SIG // WPtlCATOUKKyjWjnc/7KPkyBeps8V+Z8tlP6P4jBVU37
// SIG // 8JuE/IP2KscMnvpTpmvSivfL+r8Hv4ou9kzE1VsClxXV
// SIG // zsrD/RoqHF7d/HLj/XPGhNXh96uBXRk4CjndKxvsYQoL
// SIG // ERfBqi0+5OfFaUJyfLvso0Vui6JreUXK6KYH/RB/HuH6
// SIG // A1KFMlOUO4j4MDicWIaCsUYxmZbYQ5qeXsfulOs7/ea3
// SIG // fe9+uvKRqQpLtCAeNy/wU8zHAwFeP8bukX3FRcGqzf8i
// SIG // auan2cjLKR+YHGkwlQKLl5EE3PC8LX8bYCM+d6jElUfX
// SIG // PYJEp8TOXNbR4IjF9w9hgZ0Gp/ebcvgnU2AAIY4AU3Mo
// SIG // /T+zhhDIa95cmmcY694KbOmZqOO1TkyPLbEmB4R7Q/Aa
// SIG // QaIN/S+XuP5QyYPzquKxrBSksTF7iEWdRNPHZl+u1zO6
// SIG // pr5tuzvNOAoRJm/gjkfFm+OjBRBM+to7vsUCAwEAAaOC
// SIG // AUkwggFFMB0GA1UdDgQWBBSup8C7/VkC9zSMRCcj7iTG
// SIG // ejCNjTAfBgNVHSMEGDAWgBSfpxVdAF5iXYP05dJlpxtT
// SIG // NRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5odHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3Nv
// SIG // ZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5j
// SIG // cmwwbAYIKwYBBQUHAQEEYDBeMFwGCCsGAQUFBzAChlBo
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2Nl
// SIG // cnRzL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0El
// SIG // MjAyMDEwKDEpLmNydDAMBgNVHRMBAf8EAjAAMBYGA1Ud
// SIG // JQEB/wQMMAoGCCsGAQUFBwMIMA4GA1UdDwEB/wQEAwIH
// SIG // gDANBgkqhkiG9w0BAQsFAAOCAgEAUgXd1CfiLL3TAl/i
// SIG // u8ah2uVAbVQtQml2bx0XfrLVtJVwP3UzZ3gltExawaCW
// SIG // OfW/X5206Lj0XmpLtpd1+W5obGqOgwkVbqnJoVTwGckl
// SIG // xnqFX4+dnCxosmSxMOk0M7ug/vr4zThpkomztChPRnb/
// SIG // IUBEceURtCoK05pPHJHgtVVKrnlEBylQhEqkw1Aw/HV0
// SIG // y1gppuh6pkF+v/oCg0l4IMKXO+YYtgGykqOLbpTME31y
// SIG // XRncK7Ih45M/J8yFv2dz5zIBhVO+irs2BVdF8h/Q00vw
// SIG // zzvOkS7UIwOWZVRspkz3058O5MaIiyTf8pbjByJB0s6W
// SIG // ibwoql/g59UBkRBJzSGXkXpLy6Lq6j0RCDk5tWyUSdOu
// SIG // XPWF+2ydJ2j4sc5ucvGNgfmCCBAIuI1K2jod6BO2uCby
// SIG // FtxIN6Daj+6oaXe8TC8atlpzPlPW6lk3k+FQqKQIV7tr
// SIG // hkHsXS6u21nXGMMhBQ4UuGfTdLsN4em4we0uDF/eqX2E
// SIG // hFdDChRjim5nwlEu1nppLhamctKDRzz8fnH3TWHkhem4
// SIG // Tjx3bK6NRFXd81iJHQ9RuZBAz5xELRWq7TPB/m7+c1IQ
// SIG // FCbPKi87hQHQWUC7ng/V2Xsp40CsBHgM+t8QEyAofLTl
// SIG // DNszIEhIVS/B5uOUgen6HrOAUwtGPEmVqL9yGobb8Mhx
// SIG // W1KrNWIwggdxMIIFWaADAgECAhMzAAAAFcXna54Cm0mZ
// SIG // AAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9v
// SIG // dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0y
// SIG // MTA5MzAxODIyMjVaFw0zMDA5MzAxODMyMjVaMHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0ciELeaLL
// SIG // 1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK4OK9uT4X
// SIG // YDP/XE/HZveVU3Fa4n5KWv64NmeFRiMMtY0Tz3cywBAY
// SIG // 6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxRMTegCjhu
// SIG // je3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk2pg7uhp7
// SIG // M62AW36MEBydUv626GIl3GoPz130/o5Tz9bshVZN7928
// SIG // jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi947SHJMPgyY9+
// SIG // tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedGbsoy1cCG
// SIG // MFxPLOJiss254o2I5JasAUq7vnGpF1tnYN74kpEeHT39
// SIG // IM9zfUGaRnXNxF803RKJ1v2lIH1+/NmeRd+2ci/bfV+A
// SIG // utuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQcNIIP8BDy
// SIG // t0cY7afomXw/TNuvXsLz1dhzPUNOwTM5TI4CvEJoLhDq
// SIG // hFFG4tG9ahhaYQFzymeiXtcodgLiMxhy16cg8ML6EgrX
// SIG // Y28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHzNgY1GIRH
// SIG // 29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREdcu+N+VLE
// SIG // hReTwDwV2xo3xwgVGD94q0W29R6HXtqPnhZyacaue7e3
// SIG // PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQBgjcVAQQF
// SIG // AgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5kxJq+gpE8
// SIG // RjUpzxD/LwTuMB0GA1UdDgQWBBSfpxVdAF5iXYP05dJl
// SIG // pxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQBgjdMg30B
// SIG // ATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20vcGtpb3BzL0RvY3MvUmVwb3NpdG9yeS5o
// SIG // dG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/o
// SIG // olxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZF
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMu
// SIG // Y3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0
// SIG // cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwDQYJ
// SIG // KoZIhvcNAQELBQADggIBAJ1VffwqreEsH2cBMSRb4Z5y
// SIG // S/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/2mRsfNB1
// SIG // OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYeeNg2Lpyp
// SIG // glYAA7AFvonoaeC6Ce5732pvvinLbtg/SHUB2RjebYIM
// SIG // 9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveVtihVJ9Ak
// SIG // vUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSFQrP8DJ6L
// SIG // GYnn8AtqgcKBGUIZUnWKNsIdw2FzLixre24/LAl4FOmR
// SIG // sqlb30mjdAy87JGA0j3mSj5mO0+7hvoyGtmW9I/2kQH2
// SIG // zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1RtnWN0SCyx
// SIG // TkctwRQEcb9k+SS+c23Kjgm9swFXSVRk2XPXfx5bRAGO
// SIG // WhmRaw2fpCjcZxkoJLo4S5pu+yFUa2pFEUep8beuyOiJ
// SIG // Xk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFmPWn9y8FB
// SIG // SX5+k77L+DvktxW/tM4+pTFRhLy/AsGConsXHRWJjXD+
// SIG // 57XQKBqJC4822rpM+Zv/Cuk0+CQ1ZyvgDbjmjJnW4SLq
// SIG // 8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhwRNGQ8cir
// SIG // Ooo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUzWLOhcGby
// SIG // oYIDUDCCAjgCAQEwgfmhgdGkgc4wgcsxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVy
// SIG // aWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQg
// SIG // VFNTIEVTTjo4NjAzLTA1RTAtRDk0NzElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEB
// SIG // MAcGBSsOAwIaAxUAMVvbosxt4RGPPbi9rrvl/phv63Wg
// SIG // gYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDANBgkqhkiG9w0BAQsFAAIFAOlTsQQwIhgPMjAyNDAx
// SIG // MTgxNDE1MzJaGA8yMDI0MDExOTE0MTUzMlowdzA9Bgor
// SIG // BgEEAYRZCgQBMS8wLTAKAgUA6VOxBAIBADAKAgEAAgIx
// SIG // xwIB/zAHAgEAAgITijAKAgUA6VUChAIBADA2BgorBgEE
// SIG // AYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAID
// SIG // B6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBCwUAA4IB
// SIG // AQCTQ2nm2bQUwzMaczqDrS7TFMBsIXnlg6BXGmSS4lQS
// SIG // gYc3t+vKheABhaQ0OOR93ADvGsTEiZlQEYWxA1CHVBBK
// SIG // +AD8zzgHbBJBXXdWO8fDt1HECKcYz/c3aZSduwJ8t292
// SIG // wR+rUaOwPIwaQ1v3Atz+GZPa9giHdx/NcMZRACYBqwRi
// SIG // f96umqfpWzOnm+KwHsCqv4tzbemKuPKN6iKyl3oWYjew
// SIG // 7cEro8BC4j7ClyKQOb9J8OnSrU3PG8mGandsVOyNd9T5
// SIG // +1YkdA/maplDYO5JiYyB7amzRrJHOY8Oq9nMHuRnhuJe
// SIG // dEbCW5QIgkNDjdPUzGqVm5bRv+jYooMnZcxxMYIEDTCC
// SIG // BAkCAQEwgZMwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTACEzMAAAHXmw0eVy6MUY4AAQAAAdcwDQYJYIZIAWUD
// SIG // BAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0B
// SIG // CRABBDAvBgkqhkiG9w0BCQQxIgQgZ77ciQO2duqEaPDJ
// SIG // kS+Bb0F1xJW9IGL7ruBLEO9OLZowgfoGCyqGSIb3DQEJ
// SIG // EAIvMYHqMIHnMIHkMIG9BCCc3j5eS159T4qjY8fGDe0z
// SIG // dWSNHdWV/9s0XZyPe6yaOzCBmDCBgKR+MHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB15sNHlcujFGO
// SIG // AAEAAAHXMCIEIKoBw62ewUU9VJGmkdZlQPn+49l1p3GQ
// SIG // BHyg4Nfqk2o9MA0GCSqGSIb3DQEBCwUABIICACIEgicy
// SIG // 3WCvFoUYZgMFkjBakKBlytSXB5ZGYBUnOswTqiCI23iZ
// SIG // DonGnVSGhPUdxSQ22W5xItetuzAb1WCZRbjUY/lvHVJ2
// SIG // 8QXTPuSLNdUjNmmMBIHyW7h9VOMeKj17J2b0BAFpuUap
// SIG // nJvMhOLkCJIFdE4esD6bOlv04zvboQau3jlQaSIs3qac
// SIG // XcIrQIdWVi47skmtwXEO+0iXvZ33Rgo2ms1+PHJnv0Xw
// SIG // oHFa16wVvsn24LOLkq9tETJoe7mMpf/eF/R8UFxUWffF
// SIG // Vci58dWXCdqVKCYWHFtHXHpsFKZZjfObO+juOZG/03Ar
// SIG // lTxfqZaYzXiUJcu46swLUf8kCtS8EKbd2UvFHqtF1Uux
// SIG // lc7ZG1FN2hB0c9qYASV3HjIrkQGOOcj8dafJ2SGUSiV2
// SIG // vXZSCP9hPyBreAP+/GyC7jymfkB878CArYfJvsfXqIr/
// SIG // Jxin0H4uAHlzw5+RcF9iKdnSolQG9bl4KhK7lXCdORsi
// SIG // R2DXEUKwocNl4mpLGe7n/P+q79cUvk+ynuMHI7YjWalx
// SIG // KOPYdYc+i8nk5Qd368jrNwgKyAt2C/sH11S7pmtkcBxv
// SIG // IFj1T3AkY6mPhMYwdGRLB8W6IGz+Km6KlPDlJXUNQ2Fi
// SIG // 5pPPH5Fl7G3y/r8fMlCYvo/ARSCKU9BBLNNY9LQ6xydo
// SIG // obW/aobBHrDpPVy3
// SIG // End signature block
