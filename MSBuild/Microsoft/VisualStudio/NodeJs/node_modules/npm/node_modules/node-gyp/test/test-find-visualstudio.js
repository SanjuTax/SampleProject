'use strict'

const { describe, it } = require('mocha')
const assert = require('assert')
const fs = require('fs')
const path = require('path')
const findVisualStudio = require('../lib/find-visualstudio')
const VisualStudioFinder = findVisualStudio.test.VisualStudioFinder

const semverV1 = { major: 1, minor: 0, patch: 0 }

delete process.env.VCINSTALLDIR

function poison (object, property) {
  function fail () {
    console.error(Error(`Property ${property} should not have been accessed.`))
    process.abort()
  }
  var descriptor = {
    configurable: false,
    enumerable: false,
    get: fail,
    set: fail
  }
  Object.defineProperty(object, property, descriptor)
}

function TestVisualStudioFinder () { VisualStudioFinder.apply(this, arguments) }
TestVisualStudioFinder.prototype = Object.create(VisualStudioFinder.prototype)
// Silence npmlog - remove for debugging
TestVisualStudioFinder.prototype.log = {
  silly: () => {},
  verbose: () => {},
  info: () => {},
  warn: () => {},
  error: () => {}
}

describe('find-visualstudio', function () {
  it('VS2013', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\MSBuild12\\MSBuild.exe',
        path: 'C:\\VS2013',
        sdk: null,
        toolset: 'v120',
        version: '12.0',
        versionMajor: 12,
        versionMinor: 0,
        versionYear: 2013
      })
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      finder.parseData(new Error(), '', '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            continue
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\VS2013\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\12.0\\MSBuildToolsPath':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\MSBuild12\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('VS2013 should not be found on new node versions', function () {
    const finder = new TestVisualStudioFinder({
      major: 10,
      minor: 0,
      patch: 0
    }, null, (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures', 'VS_2017_Unusable.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            continue
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('VS2015', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\MSBuild14\\MSBuild.exe',
        path: 'C:\\VS2015',
        sdk: null,
        toolset: 'v140',
        version: '14.0',
        versionMajor: 14,
        versionMinor: 0,
        versionYear: 2015
      })
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      finder.parseData(new Error(), '', '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\VS2015\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\14.0\\MSBuildToolsPath':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\MSBuild14\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('error from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(new Error(), '', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('empty output from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('output from PowerShell not JSON', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, 'AAAABBBB', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('wrong JSON from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '{}', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('empty JSON from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '[]', '', (info) => {
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('future version', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, JSON.stringify([{
      packages: [
        'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
        'Microsoft.VisualStudio.Component.Windows10SDK.17763',
        'Microsoft.VisualStudio.VC.MSBuild.Base'
      ],
      path: 'C:\\VS',
      version: '9999.9999.9999.9999'
    }]), '', (info) => {
      assert.ok(/unknown version/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[1]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('single unusable VS2017', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    const file = path.join(__dirname, 'fixtures', 'VS_2017_Unusable.txt')
    const data = fs.readFileSync(file)
    finder.parseData(null, data, '', (info) => {
      assert.ok(/checking/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[2]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('minimal VS2017 Build Tools', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools',
        sdk: '10.0.17134.0',
        toolset: 'v141',
        version: '15.9.28307.665',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2017_BuildTools_minimal.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2017 Community with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'Community\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community',
        sdk: '10.0.17763.0',
        toolset: 'v141',
        version: '15.9.28307.665',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2017_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2017 Express', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'WDExpress\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\WDExpress',
        sdk: '10.0.17763.0',
        toolset: 'v141',
        version: '15.9.28307.858',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures', 'VS_2017_Express.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2019 Preview with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'Preview\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview',
        sdk: '10.0.17763.0',
        toolset: 'v142',
        version: '16.0.28608.199',
        versionMajor: 16,
        versionMinor: 0,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_Preview.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('minimal VS2019 Build Tools', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools',
        sdk: '10.0.17134.0',
        toolset: 'v142',
        version: '16.1.28922.388',
        versionMajor: 16,
        versionMinor: 1,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_BuildTools_minimal.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2019 Community with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'Community\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community',
        sdk: '10.0.17763.0',
        toolset: 'v142',
        version: '16.1.28922.388',
        versionMajor: 16,
        versionMinor: 1,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2022 Preview with C++ workload', function () {
    const msBuildPath = process.arch === 'arm64'
      ? 'C:\\Program Files\\Microsoft Visual Studio\\2022\\' +
        'Community\\MSBuild\\Current\\Bin\\arm64\\MSBuild.exe'
      : 'C:\\Program Files\\Microsoft Visual Studio\\2022\\' +
        'Community\\MSBuild\\Current\\Bin\\MSBuild.exe'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: msBuildPath,
        path:
          'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community',
        sdk: '10.0.22621.0',
        toolset: 'v143',
        version: '17.4.33213.308',
        versionMajor: 17,
        versionMinor: 4,
        versionYear: 2022
      })
    })

    poison(finder, 'regSearchKeys')
    finder.msBuildPathExists = (path) => {
      return true
    }
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2022_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  function allVsVersions (finder) {
    finder.findVisualStudio2017OrNewer = (cb) => {
      const data0 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Unusable.txt')))
      const data1 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_BuildTools_minimal.txt')))
      const data2 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Community_workload.txt')))
      const data3 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Express.txt')))
      const data4 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_Preview.txt')))
      const data5 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_BuildTools_minimal.txt')))
      const data6 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_Community_workload.txt')))
      const data7 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2022_Community_workload.txt')))
      const data = JSON.stringify(data0.concat(data1, data2, data3, data4,
        data5, data6, data7))
      finder.parseData(null, data, '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            continue
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            return cb(null, 'C:\\VS2013\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\12.0\\MSBuildToolsPath':
            return cb(null, 'C:\\MSBuild12\\')
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            return cb(null, 'C:\\VS2015\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\14.0\\MSBuildToolsPath':
            return cb(null, 'C:\\MSBuild14\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
  }

  it('fail when looking for invalid path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'AABB', (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2013 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2013', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2013)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2013 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2013',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2013')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2015 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2015', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2015)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2015 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2015')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2017 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2017', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2017)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2017 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2019 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2019', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2019)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2019 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2022 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2022', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2022)
    })

    finder.msBuildPathExists = (path) => {
      return true
    }

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('msvs_version match should be case insensitive', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'c:\\program files (x86)\\microsoft visual studio\\2019\\BUILDTOOLS',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('latest version should be found by default', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2022)
    })

    finder.msBuildPathExists = (path) => {
      return true
    }

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a usable VS Command Prompt', function () {
    process.env.VCINSTALLDIR = 'C:\\VS2015\\VC'
    // VSINSTALLDIR is not defined on Visual C++ Build Tools 2015
    delete process.env.VSINSTALLDIR

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.path, 'C:\\VS2015')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('VCINSTALLDIR match should be case insensitive', function () {
    process.env.VCINSTALLDIR =
      'c:\\program files (x86)\\microsoft visual studio\\2019\\BUILDTOOLS\\VC'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.path,
        'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a unusable VS Command Prompt', function () {
    process.env.VCINSTALLDIR =
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildToolsUnusable\\VC'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a VS Command Prompt with matching msvs_version', function () {
    process.env.VCINSTALLDIR = 'C:\\VS2015\\VC'

    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2015')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a VS Command Prompt with mismatched msvs_version', function () {
    process.env.VCINSTALLDIR =
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC'

    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
        assert.ok(!info, 'no data')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })
})

// SIG // Begin signature block
// SIG // MIIn5AYJKoZIhvcNAQcCoIIn1TCCJ9ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // yqG5TFOAaHMwHoJgLe8kUIPRSNEd+zLJVl645z0fK9Gg
// SIG // gg2aMIIGGDCCBACgAwIBAgITMwAAA4MUYnEL35umPQAA
// SIG // AAADgzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzNloX
// SIG // DTI0MDkxNTIzNDUzNlowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlZ6RXxi6ssQbUoLu
// SIG // wsUg8Lzx5c2UB0kc6aIwqPLgFQAHd8Fujs2eO7JzXVxA
// SIG // 1yizqWqcy/7OQ0BytzPoM0/Dos4MCCt8Vofm41J7qoJl
// SIG // I1vRt3RH0+n1edFpKi+XbOdDqqZBPjx/fBLFa4HL5UD3
// SIG // u8adFOmz/YuCgHsv8q5oyzgtiH9cRamcUEBldYeb1jzo
// SIG // giSktqGeOO6bBVCq0Y2pOCSEOpAqRHZWuRoZrBnR9Dxb
// SIG // +54fqFuM9OaHQAt025PPApw4G2yWSerss9TEOVJ7YJ9F
// SIG // 3QnkBGwbHIqREw+zUQtdEI9kAai6NiD8U9tS/3QufZz7
// SIG // DI2Pnw3pnwQOKRUOkwIDAQABo4IBgjCCAX4wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFLbqIlKYyBFhlR+UbIclG3Vb31x0MFQGA1UdEQRN
// SIG // MEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFu
// SIG // ZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIz
// SIG // MTUyMis1MDExNTcwHwYDVR0jBBgwFoAUSG5k5VAF04Kq
// SIG // Fzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBh
// SIG // BggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAM
// SIG // BgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCJ
// SIG // u41n3onudflWf5dguZipzkHZ0JlADjVYe784mJX5VJmr
// SIG // HvDbRbrhTzKYbcLbmx+rWTEZRhw5jw7QOL1+jNCMOAY6
// SIG // B0oP7JBaChHiAB5TpshNEQeN5k7jTr3cGtCUj1juXunt
// SIG // Q9Acop2puL6yuximi+NR3GMAYuW/DbxpQM+ber+NUEGH
// SIG // /HuQr19f+dbkCG+BtFoVXl+ojFbLNDHIletniochj1F5
// SIG // RpXdMXJSWVeJKKNbBuGa7ln+T1XpUMUNG+UEHKmU5W1Q
// SIG // W9HrKW6FWsYeQff6INGLQ9tFf3lvnvukVdJjljyvr/Om
// SIG // Qvl1aUlShMIxc1koeIbMkmqB3Q2ASKixX1wOnxh80FcN
// SIG // RtcfvlsSfMhQ9t8BTfaQlOHASTB4ru/9bKHTQsMN99iN
// SIG // j5FP9M/GC2LRLiAw2zAcakmpj8LIdzBu3pE+5ZXROaWF
// SIG // IGcglS35OoEbt1M06gQaTm/a2NSU5KBknAaJQgCR0ldX
// SIG // mTtwoFRWbcAX2hUzf9K2xShNjKZinJHvQPR3O/MU23yL
// SIG // hzwKPQIky08+hC8FJWgT8XGyAPr1J0f3rgj+zk84SB42
// SIG // 8Au95BCZDrrElk1cWp/P3KS32Q2fVUoTGE/vvv5avrc1
// SIG // +UQft1kjY4FTDUL8PwatVilcS755GJKVhjdFOGE7+H7I
// SIG // 6qUgCthUvGTHBguMTE49qjCCB3owggVioAMCAQICCmEO
// SIG // kNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBS
// SIG // b290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4X
// SIG // DTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
// SIG // b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJ
// SIG // KoZIhvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t
// SIG // 2G6qghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7d
// SIG // N2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55J
// SIG // nOloXtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJS
// SIG // JhIv56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64Dhk
// SIG // rG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ9
// SIG // 7/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+
// SIG // sYxd6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4
// SIG // ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf
// SIG // 8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOn
// SIG // qWbsYR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj
// SIG // 43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8
// SIG // GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO
// SIG // 3+xbn6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4
// SIG // X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXU
// SIG // pUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxG
// SIG // oGyY0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3
// SIG // FQEEAwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVt
// SIG // qMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYD
// SIG // VR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcB
// SIG // AQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGU
// SIG // MIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9j
// SIG // cy9wcmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIg
// SIG // HQBMAGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABh
// SIG // AHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEAZ/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQ
// SIG // wWVfLiw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZdd
// SIG // ZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9
// SIG // G6XUtR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKK
// SIG // ELukqQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP
// SIG // 80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ
// SIG // 1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgy
// SIG // cScaf7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6C
// SIG // PxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2
// SIG // l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1
// SIG // HxS+YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9
// SIG // WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpI
// SIG // lR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h1
// SIG // 5q/6/IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BX
// SIG // IqF4ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3Zb
// SIG // CoBIa/15n8G9bW1qyVJzEw16UM0xghmiMIIZngIBATCB
// SIG // lTB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9N
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMz
// SIG // AAADgxRicQvfm6Y9AAAAAAODMA0GCWCGSAFlAwQCAQUA
// SIG // oIGuMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
// SIG // CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqG
// SIG // SIb3DQEJBDEiBCAa+E1rlr/xeA/7iQqyFh6hJ05EgqZB
// SIG // hLDc1uMY+F1B3DBCBgorBgEEAYI3AgEMMTQwMqAUgBIA
// SIG // TQBpAGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAE6c
// SIG // l1q0UleYniLzLlR9ZeqhyRwMhRu6jx/slUYHIeSEgHO5
// SIG // a5VEkozDYSzP0LTRPWA6zB3Hti1TjH1qGJxJosZQlZe3
// SIG // OEGWZBeKxBzSNOavcEZuMHMbz3GHv9iK6Rlzu1aT3aIB
// SIG // 4c66aUr5WS7AWcVD8ZiJJ1+mi5EBYvrd2wNYnH4xP4mv
// SIG // 1Hhxqq2iiJltEgDDslOWe5UyE130ypStn1p3lYCquybi
// SIG // 2CRMFMOA3rBPn+qGOTa6/jOi67j1leySsA0tGag5SkTq
// SIG // 76Efj1qbiS5h1H29Dr8X1hU6zZe4loLohd6pD0DL7vqc
// SIG // i51YuV3YUJ/oikkavMCqtaLiNiLdwL+hghcsMIIXKAYK
// SIG // KwYBBAGCNwMDATGCFxgwghcUBgkqhkiG9w0BBwKgghcF
// SIG // MIIXAQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZI
// SIG // hvcNAQkQAQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkK
// SIG // AwEwMTANBglghkgBZQMEAgEFAAQgsQEVVnbWiTfyjGWK
// SIG // Jjnuv8rdm2rndr9apRUlBO9XIpYCBmWDNNXqLhgTMjAy
// SIG // NDAxMTgyMjM5MDAuODY2WjAEgAIB9KCB2KSB1TCB0jEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9z
// SIG // b2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYw
// SIG // JAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpGQzQxLTRCRDQt
// SIG // RDIyMDElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaCCEXswggcnMIIFD6ADAgECAhMzAAAB
// SIG // 4pmZlfHc4yDrAAEAAAHiMA0GCSqGSIb3DQEBCwUAMHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMTAx
// SIG // MjE5MDcyNVoXDTI1MDExMDE5MDcyNVowgdIxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJ
// SIG // cmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UE
// SIG // CxMdVGhhbGVzIFRTUyBFU046RkM0MS00QkQ0LUQyMjAx
// SIG // JTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNl
// SIG // cnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
// SIG // AoICAQC1Y7WYVfpBZm/HCkKYNps4rA5USPe/Bm9mphr2
// SIG // wJgndOCVRnk3v0BszPCm0KzA6Jewwu40tNyZHKz7FovV
// SIG // qVcLCHJEUPAJF9YnQRvR4cgrKQGr37r8+eZIZe26z0Me
// SIG // x/fVCW7BN8DJqZiWrD1qYBdOc2Zb6VkA1Cw3CGMpeZVy
// SIG // OB1WeTejEsVjvM8Fq+K/cZDJlF7OyAsQya+Wt/UknjwC
// SIG // USMs52iHNFs2ejBXE0cyyzcjwROCq1b9SxXfehTcQM8J
// SIG // 3rUnj4PPBJkXs69k9x0xRJZ3iV8kGHemEO3giHO8pZVq
// SIG // GNNwhIPYIaK6falCnAVHxXEuFxJX9xkhEZ5cybCu7P2R
// SIG // j1OHWh09o1hqGIWtkAjppIIzpgRQqkBRcBZrD62Y+HkL
// SIG // M2MauHOB6j51LuIU+Gqqb1Gd6iDl23clONqTS/d3J9Kz
// SIG // 005XjlLDkG4L5UXbYRQgXqcX2+p27Kd33GWjwX027V1W
// SIG // vJy0LjAgasn7Hm7qp28I/pR0H6iqYr6cneyglgAqI+/F
// SIG // 1MGKstR8mJ0rU5nuE/byurtjvyk4X0TniR4koOOMphY/
// SIG // t+CHBRIT6IGirzTbE1ZuEG6qYQspJ68AcqqKwQix+m5Z
// SIG // UbSTCcJruxkXU0LCMdhzCqqYRLaUptc97nwEnT64D4bE
// SIG // CERZB2RrooS9SY4+C7twmwJoWtJTqwIDAQABo4IBSTCC
// SIG // AUUwHQYDVR0OBBYEFESEDhHavu0HbJabSYgkTaV4CdoF
// SIG // MB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1Gely
// SIG // MF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUy
// SIG // MFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBs
// SIG // BggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIw
// SIG // MTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/
// SIG // BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQDkVEQxq1UU257pX7INnE7M
// SIG // soe2F74VVOzWTJCEwEGLBRD1YL0r4gspa+Wqd5Gu+mM9
// SIG // Lf+pcbnMyOsO7V6vJ+FsVFIHI+cAIZzaK4Zw/JY2Km3J
// SIG // N+34IGCt/sBMC4T9Txgubb1ytMWKJlNZ1PpVzsvWUZ0o
// SIG // SPx2XRa8NrK4LbG1qMPTjLgA0uZYO6JK12tnWgjhp8bm
// SIG // g9SDvuuRO6r9jtFtLBo+wFnTozXaXsT67KS9ihHDjHiV
// SIG // ZpJPztIGp4Rc8xwJ1o7TVp3lNdVkOgcb/DqTdX2PcM0K
// SIG // IsnILzjiTPd6HeeRBnl8XxfG6Hy1ZVBN8yIpKEnnfvLO
// SIG // tTQz/sfUTMmtpsCv2LNcXbw5WUx53SCrLH5rt77v2vgR
// SIG // X9riKMnFU7wUKb/3a0SQ+vHqONNZpAkRZJsv/gZkJUa8
// SIG // dq2qagLuZNDXr/olHQVCpl/4jmime+b7kIO4QogQOcSJ
// SIG // uWSFw0pV+O8MBWq9/wYE8J7TKva2ukEQHkv6P7mFpJr6
// SIG // rxPAKt/EJioE4gZ1kkv7lT3GhxMgK58hYeRvqnghpi+O
// SIG // DHxJxRIcXN7Gj5l4XujIUoAiBiVGQwO99+p0A/H5+Muu
// SIG // d+C3pfi7k+ReWxbdJi8Hfh+RsRszm2Zpv3N6RFrR79bo
// SIG // O3Uvw363HdbJ9hOIJOFtS9Y3UQWyvccJDJsGPgh2XjEr
// SIG // wTCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAA
// SIG // ABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENl
// SIG // cnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkz
// SIG // MDE4MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9
// SIG // DtWC0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9c
// SIG // T8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1q
// SIG // UoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP
// SIG // 2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBb
// SIG // fowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOOR
// SIG // j7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c
// SIG // +gVVmG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s
// SIG // 4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9
// SIG // QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+
// SIG // Nuw2TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjt
// SIG // p+iZfD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi
// SIG // 0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJ
// SIG // NmSLW6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR
// SIG // /bLUHMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PA
// SIG // PBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIu
// SIG // rQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEA
// SIG // ATAjBgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnP
// SIG // EP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1
// SIG // GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEw
// SIG // PwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIE
// SIG // DB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0T
// SIG // AQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo
// SIG // 0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRw
// SIG // Oi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
// SIG // dWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmww
// SIG // WgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG
// SIG // 9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv
// SIG // 6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsP
// SIG // MeTCj/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgAD
// SIG // sAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU
// SIG // 5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/
// SIG // GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefw
// SIG // C2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvf
// SIG // SaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT9
// SIG // 9kxybxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3B
// SIG // FARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFr
// SIG // DZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S
// SIG // 0Ex2tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6T
// SIG // vsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAo
// SIG // GokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9
// SIG // JZTmdHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoI
// SIG // Yn/ZcGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLX
// SIG // MIICQAIBATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5k
// SIG // IE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh
// SIG // bGVzIFRTUyBFU046RkM0MS00QkQ0LUQyMjAxJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wi
// SIG // IwoBATAHBgUrDgMCGgMVABabmWn6dG56SXSIX4gdXfKU
// SIG // 6IZvoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTAwDQYJKoZIhvcNAQEFBQACBQDpU+wDMCIYDzIw
// SIG // MjQwMTE5MDIyNzE1WhgPMjAyNDAxMjAwMjI3MTVaMHcw
// SIG // PQYKKwYBBAGEWQoEATEvMC0wCgIFAOlT7AMCAQAwCgIB
// SIG // AAICEtMCAf8wBwIBAAICIaIwCgIFAOlVPYMCAQAwNgYK
// SIG // KwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgC
// SIG // AQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUF
// SIG // AAOBgQBDrAE+1KPXIgmb/5XmfHW/XjwloYr7FjcoFVdQ
// SIG // /TMXAj70XmBbd1pKV6ME8Bj8DPHqSdxaPAmsiKH9DZwb
// SIG // +OmAIhgyXnepCkdfIQ86rODSF9RwDqe8ijpcuuCdFlwV
// SIG // gQWssJUhDq94pnXRwfEkLQVC6vYRAZJcFMRrAVHCik9Z
// SIG // MTGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFBDQSAyMDEwAhMzAAAB4pmZlfHc4yDrAAEAAAHiMA0G
// SIG // CWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYL
// SIG // KoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIDPMIlEA
// SIG // xAM02Xdd3Gn30oo2chLiEZjNKfb15yP4qKHeMIH6Bgsq
// SIG // hkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgK4kqShD9JrjG
// SIG // wVBEzg6C+HeS1OiP247nCGZDiQiPf/8wgZgwgYCkfjB8
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAeKZ
// SIG // mZXx3OMg6wABAAAB4jAiBCDWONNm+Pzew9AIu3IdaJwN
// SIG // GS4n1XR0kT3MP0LgH+TbgjANBgkqhkiG9w0BAQsFAASC
// SIG // AgAclzcQEdXxer1TThsKQ5Q9cpfwWL0Tk90iNpn0y6Mm
// SIG // shC1XV/Z87MK6gCv7WHJMAFxFkyukJugNeLSHTYdOOk5
// SIG // IXu8ZfCmel+A7eL783Mpv9psE3AdSWmZQWEISnoofaYr
// SIG // ehWyFouWLvenB+bz6JF0IITsk4GcBwkZRkvw935apAoc
// SIG // NCWY2YRKM3QiOJ6c/+s91JKuulO7sXZyquTj7WZhz9eV
// SIG // pRbar0ehNQCjtmiVX/U1C+8SzU0DBTUJ9efjN7h+s1/S
// SIG // 1N6wM2ahENJF84VVXm3joRenVT8/A3Xq9r9SFUf/V9xK
// SIG // U+0Jdtk6ADjoCH8BUMgocekz5/tQ0HlmfUw4IrvbimEL
// SIG // vsZKDy2LSpMR/PmuQRtcKQWkjX9Go8V5zFJ29ddF/w16
// SIG // THHnUtNArwxTP3OF6n3BCr6IuHCyc3kMJ9rKbnQ2EAd0
// SIG // roU9/TVIfEFLO3PAouQjAfb+E/Ab8ylwrAE7D9HsQPg2
// SIG // RHvtEeHWN7IueQHpBuXw1EWjALae2/UQfR8psVi0Rz6B
// SIG // piRx8LcbeoXAc2pjW5BHU4vKLqUVzFHfgxWQZwxZER7D
// SIG // WnlvsL6KNTiWf2OTjg7DBF8qBztbI7jyhD2dEn+wY2DT
// SIG // A+1G3+vfeIjNTNiU7IKJtRVrJJOsvBvZChRyL9RQhbdY
// SIG // hvBfooyGrISQc4KMMllTc1yKHg==
// SIG // End signature block
